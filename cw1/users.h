#ifndef USERS_GUARD_H
#define USERS_GUARD_H

#include <string.h>
#include "book_management.h"

#define MaxUserID 3 //the maximum number of id's issued.
#define MinPasswordSize 8 //the minimum size of a user's password.
#define MaxPasswordSize 16 //the maximum size of a user's password.

#define MaxFirstNameSize 30
#define MaxLastNameSize 40
#define MaxEmailSize 254
#define MaxNumberUsers 3
#define MaxNormalUsers 2 //the maximum number of Normal type users.
#define MaxLibrarianUsers 1 //the maximum number of Librarian type users.

#define MaxBooksBorrowed 10 //the maximum number of Books a user can borrow.
#define MaxBooksReturned 10 //the maximum number of displayed returned Books by a user.

typedef struct {
  unsigned int userId;
  char *first_name;
  char *last_name;
  unsigned int type; //(1)"Normal" or (2)"Librarian" (9 is the number of letters in the word Librarian).

  char *email;
  char *password;

  unsigned int numBooksBorrowed;
  unsigned int numBooksReturned;
  struct Book books_borrowed[MaxBooksBorrowed];
  struct Book books_returned[MaxBooksReturned];

}User;

typedef struct{
  User *array;
  unsigned int length;
}User_Array;

//loads the database of users from the specified file
//the file must have been generated by a previous call to store_users()
//returns 0 if users were loaded correctly, or an error code otherwise
int load_users(FILE *file);

// returns a new user id
// first time returns 1
// if no more IDs can be generated returns -1
int newUserId();

//Registers a new user to the library and returns 0 if successful.
int register_user(unsigned int uid, char fn[],char ln[], unsigned int ut, char e[], char p[]);

// adds a user to the users_array
// if the array is full and cannot accept any more accounts the function returns 1
// otherwise it returns 0.
int add_user(User u);

//removes a user from the library
//returns 0 if the user could be successfully removed, or an error code otherwise.
int remove_user(User u);

//Checks if the provided user id and password corresponds
//to an existing user in the user database and returns 0 if correct or 1 otherwise.
const int login(char email[], char p[]);

//saves the database of users in the specified file
//returns 0 if users were stored correctly, or an error code otherwise
int store_users(FILE *file);

#endif
